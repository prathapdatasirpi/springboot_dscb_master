buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		gradlePluginPortal()
	}

	dependencies {
		classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.1.3.RELEASE'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'



//apply from: "$rootDir/integration-test.gradle"

group 'com.datasirpi.dschatbox'
version '0.0.47-SNAPSHOT'

/*
Resolving versions, default value specified above
Versions specified for Jenkins build
 */
if (project.hasProperty("branchName")) {
	def branchName = project.getProperty("branchName")
	if (branchName == "master") {
		version = version.replace('-SNAPSHOT', '')
	} else {
		version = version + "-" + branchName
	}
}
if (project.hasProperty("buildNumber")) {
	def buildNumber = project.getProperty("buildNumber")
	version = version + "-" + buildNumber
}

sourceCompatibility = 1.8

ext {
	mainClassName = 'com.datasirpi.dschatbox.DschatboxApplication'
	springVersion = '2.1.3.RELEASE'
}

springBoot {
	mainClassName = mainClassName
}

bootJar {
	manifest {
		attributes 'Start-Class': mainClassName
	}
	excludeDevtools = true
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-actuator:${springVersion}"
	implementation "org.springframework.boot:spring-boot-autoconfigure:${springVersion}"
	implementation "org.springframework.boot:spring-boot-configuration-processor:${springVersion}"
	implementation "org.springframework.boot:spring-boot-starter-security:${springVersion}"
	implementation "commons-dbcp:commons-dbcp:1.4"

	implementation "org.springframework.boot:spring-boot-starter-mail:${springVersion}"
	implementation "com.fasterxml.uuid:java-uuid-generator:3.1.4"
	implementation "org.springframework.boot:spring-boot-starter-data-rest:${springVersion}"
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springVersion}"
	implementation "com.google.apis:google-api-services-texttospeech:v1-rev40-1.25.0"
	implementation "org.eclipse.persistence:org.eclipse.persistence.core:2.5.0-RC2"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}"
	implementation "com.googlecode.json-simple:json-simple:1.1.1"
	implementation "org.modelmapper:modelmapper:0.7.5"
	implementation "io.jsonwebtoken:jjwt:0.6.0"
	implementation "org.json:json:20190722"
	implementation "mysql:mysql-connector-java:8.0.17"
	implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.30'


	testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
	testImplementation('org.mockito:mockito-junit-jupiter:2.28.2')
	testImplementation('org.mockito:mockito-core:2.28.2')

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

	compileOnly 'org.projectlombok:lombok:1.18.4'
	annotationProcessor 'org.projectlombok:lombok:1.18.4'
	implementation 'org.mapstruct:mapstruct:1.4.1.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.1.Final'

}

test {
	testLogging {
		events "passed", "skipped", "failed"
	}
}

tasks.withType(Test) {
	useJUnitPlatform()
}

jar {
	manifest {
		attributes 'Main-Class': bootRun.main
	}
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

/*
Required only for springBoot applications
https://docs.gradle.org/current/userguide/userguide.pdf
 */
configurations {
	[apiElements, runtimeElements].each {
		it.outgoing.artifacts.removeIf {
			it.buildDependencies.getDependencies(null).contains(jar)
		}
		it.outgoing.artifact(bootJar)
	}
}

